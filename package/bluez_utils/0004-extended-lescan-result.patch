diff -Naur bluez_utils-4.101.orig/tools/hcitool.c bluez_utils-4.101/tools/hcitool.c
--- bluez_utils-4.101.orig/tools/hcitool.c	2012-06-13 17:04:20.000000000 +0200
+++ bluez_utils-4.101/tools/hcitool.c	2017-03-10 21:49:22.888275256 +0100
@@ -65,6 +65,7 @@
 #define EIR_NAME_COMPLETE           0x09  /* complete local name */
 #define EIR_TX_POWER                0x0A  /* transmit power level */
 #define EIR_DEVICE_ID               0x10  /* device ID */
+#define EIR_MANUFACTURER_SPECIFIC   0xFF
 
 #define for_each_opt(opt, long, short) while ((opt=getopt_long(argc, argv, short ? short:"+", long, NULL)) != -1)
 
@@ -2371,40 +2372,33 @@
 	signal_received = sig;
 }
 
-static void eir_parse_name(uint8_t *eir, size_t eir_len,
-						char *buf, size_t buf_len)
-{
-	size_t offset;
-
-	offset = 0;
-	while (offset < eir_len) {
-		uint8_t field_len = eir[0];
-		size_t name_len;
-
-		/* Check for the end of EIR */
-		if (field_len == 0)
-			break;
-
-		if (offset + field_len > eir_len)
-			goto failed;
-
-		switch (eir[1]) {
-		case EIR_NAME_SHORT:
-		case EIR_NAME_COMPLETE:
-			name_len = field_len - 1;
-			if (name_len > buf_len)
-				goto failed;
-
-			memcpy(buf, &eir[2], name_len);
-			return;
-		}
-
-		offset += field_len + 1;
-		eir += field_len + 1;
-	}
-
-failed:
-	snprintf(buf, buf_len, "(unknown)");
+// parse one field
+static uint8_t *eir_parse(uint8_t *eir, uint8_t *eir_len,
+			  uint8_t *type, uint8_t *buf, uint8_t *buf_len)
+{
+  uint8_t field_len = eir[0];
+
+  /* Check for the end of EIR */
+  if (field_len == 0) {
+    *type = 0;
+    return NULL;
+  }
+
+  *type = eir[1];
+
+  /* field length mismatch */
+  if (field_len > *eir_len)
+    return NULL;
+
+  /* copy data */
+  if (field_len - 1 <= *buf_len)
+    *buf_len = field_len - 1;
+    
+  memcpy(buf, &eir[2], *buf_len);
+
+  *eir_len -= field_len + 1;
+  eir += field_len + 1;
+  return eir;
 }
 
 static int print_advertising_devices(int dd, uint8_t filter_type)
@@ -2459,18 +2453,106 @@
 		if (meta->subevent != 0x02)
 			goto done;
 
-		/* Ignoring multiple reports */
 		info = (le_advertising_info *) (meta->data + 1);
 		if (check_report_filter(filter_type, info)) {
-			char name[30];
-
-			memset(name, 0, sizeof(name));
+			uint8_t i, type, *eir_data = info->data, eir_length = info->length;
+			uint8_t data[33], data_len = 32;
 
 			ba2str(&info->bdaddr, addr);
-			eir_parse_name(info->data, info->length,
-							name, sizeof(name) - 1);
 
-			printf("%s %s\n", addr, name);
+			// check for additional byte behind the info structure
+			if(ptr + len - (info->data + info->length) > 0)
+			  printf("%s RSSI %d\n", addr, (int8_t)(info->data[info->length] & 0xff));
+
+			while(eir_data && eir_length) {
+			  memset(data, 0, sizeof(data));
+			  data_len = sizeof(data)-1;
+			  eir_data = eir_parse(eir_data, &eir_length, &type, data, &data_len);
+			  
+			  switch(type) {
+			  case 0:
+			    break;
+
+			  case EIR_FLAGS:
+			    // 1 byte
+			    printf("%s FLAGS %2.2X\n", addr, data[0]);
+			    break;
+
+			  case EIR_NAME_SHORT:
+			  case EIR_NAME_COMPLETE:
+			    printf("%s NAME %s\n", addr, (char*)data);
+			    break;
+
+			  case EIR_UUID16_SOME:  // 16-bit UUID, more available
+			  case EIR_UUID16_ALL:   // 16-bit UUID, all listed
+			    printf("%s UUID16 %2.2X%2.2X\n",
+				   addr, data[1], data[0]);
+			    
+			  case EIR_UUID32_SOME:  // 32-bit UUID, more available
+			  case EIR_UUID32_ALL:   // 32-bit UUID, all listed
+			    printf("%s UUID32 %2.2X%2.2X%2.2X%2.2X\n",
+				   addr, data[3], data[2], data[1], data[0]);
+			    
+			  case EIR_UUID128_SOME:  // 128-bit UUID, more available
+			  case EIR_UUID128_ALL:   // 128-bit UUID, all listed
+			    printf("%s UUID128 %2.2X%2.2X%2.2X%2.2X-"
+				   "%2.2X%2.2X-%2.2X%2.2X-"
+				   "%2.2X%2.2X-"
+				   "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X\n",
+				   addr, data[15], data[14], data[13], data[12],
+				   data[11], data[10], data[9], data[8],
+				   data[7], data[6], data[5], data[4],
+				   data[3], data[2], data[1], data[0]);
+			    break;
+
+			  case 0x12:  // Slave connection interval range
+			    printf("%s SLV_CON_RANGE %.2f-%.2f\n",
+				   addr, ntohs(*(uint16_t*)&data[0])/204.8, ntohs(*(uint16_t*)&data[2])/204.8);
+			    break;
+
+			  case 0x16:  // Service data UUID16
+			    printf("%s SRV_DATA_UUID16 %2.2X%2.2X ",
+				   addr, data[1], data[0]);
+			    for (i = 2; i < data_len; i++)
+			      printf("%2.2X%s", data[i], (i < data_len-1)?"":"\n");			    
+			    break;
+			    
+			  case 0x20:  // Service data UUID32
+			    printf("%s SRV_DATA_UUID32 %2.2X%2.2X%2.2X%2.2X ",
+				   addr, data[3], data[2], data[1], data[0]);
+			    for (i = 4; i < data_len; i++)
+			      printf("%2.2X%s", data[i], (i < data_len-1)?"":"\n");			    
+			    break;
+			    
+			  case 0x21:  // Service data UUID128
+			    printf("%s SRV_DATA_UUID128 %2.2X%2.2X%2.2X%2.2X-"
+				   "%2.2X%2.2X-%2.2X%2.2X-"
+				   "%2.2X%2.2X-"
+				   "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X ",
+				   addr, data[15], data[14], data[13], data[12],
+				   data[11], data[10], data[9], data[8],
+				   data[7], data[6], data[5], data[4],
+				   data[3], data[2], data[1], data[0]);
+			    for (i = 16; i < data_len; i++)
+			      printf("%2.2X%s", data[i], (i < data_len-1)?"":"\n");			    
+			    break;
+			    
+			  case EIR_TX_POWER:
+			    // 1 byte
+			    printf("%s TX_PWR %d\n", addr, data[0]);
+			    break;
+
+			  case EIR_MANUFACTURER_SPECIFIC:
+			    // this includes iBeacon data
+			    printf("%s VENDOR ", addr);
+			    for (i = 0; i < data_len; i++)
+			      printf("%2.2X%s", data[i], (i < data_len-1)?"":"\n");
+			    break;
+
+			  default:
+			    printf("%s <unknown_type_%d> %d\n", addr, type, data_len);
+			  }
+			}
 		}
 	}
 
